<Application x:Class="taste_it.App" 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
             
             xmlns:local="clr-namespace:taste_it" 
             xmlns:my="clr-namespace:taste_it.Additionals" 
             xmlns:sw="clr-namespace:taste_it.Additionals.StyleableWindow"
             xmlns:ws="clr-namespace:taste_it.Additionals.WatermarkService"
             xmlns:viewmodels="clr-namespace:taste_it.ViewModels" 
             xmlns:views="clr-namespace:taste_it.Views" 
             xmlns:models="clr-namespace:taste_it.Models" 
             
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             d1p1:Ignorable="d" 
             xmlns:d1p1="http://schemas.openxmlformats.org/markup-compatibility/2006">
  <Application.Resources>
     <viewmodels:ViewModelLocator x:Key="Locator" d:IsDataSource="True" xmlns:viewmodels="clr-namespace:taste_it.ViewModels" />
     <SolidColorBrush x:Key="WindowColor" Color="#FF21272C" />
    <SolidColorBrush x:Key="WindowBackColor" Color="#FF21272C" />
    <SolidColorBrush x:Key="WindowForeColor" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="WindowForeHighlightColor" Color="#FFD1D7DC" />
    <SolidColorBrush x:Key="WindowButtonColor" Color="#FF21272C" />
    <SolidColorBrush x:Key="WindowButtonOverColor" Color="#FF2D353A" />
    <SolidColorBrush x:Key="WindowButtonPressedColor" Color="#FF14181B" />
    <sw:WindowMinimizeCommand x:Key="MinimizeCommand">
    </sw:WindowMinimizeCommand>
    <sw:WindowMaximizeCommand x:Key="MaximizeCommand">
    </sw:WindowMaximizeCommand>
    <sw:WindowCloseCommand x:Key="CloseCommand">
    </sw:WindowCloseCommand>
    <Style x:Key="EntryFieldStyle" TargetType="Grid">
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="20,0" />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="WindowButton">
      <Setter Property="Height" Value="25" />
      <Setter Property="Width" Value="25" />
      <Setter Property="Background" Value="{StaticResource WindowButtonColor}" />
      <Setter Property="Foreground" Value="{StaticResource WindowForeColor}" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Button}">
            <Border Background="{TemplateBinding Background}">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource WindowButtonColor}" />
                <Setter Property="Foreground" Value="{StaticResource WindowColor}" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}" />
                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}" />
              </Trigger>
              <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}" />
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
        <SolidColorBrush x:Key="MainTextColor" Color="#FF61C67C" />
        <SolidColorBrush x:Key="BackgroundColor" Color="#FFFFFFFF" />
        <Style x:Key="LineTextbox" TargetType="{x:Type TextBox}">
            <Setter Property="BorderBrush" Value="{StaticResource MainTextColor}" />
            <Setter Property="BorderThickness" Value="0 0 0 2" />
            <Setter Property="FontSize" Value="18px" />
            <Setter Property="Foreground" Value="{StaticResource MainTextColor}" />
            <Setter Property="Width" Value="400"/>
            <Setter Property="Padding" Value="0 0 0 8"/>
            <Setter Property="Margin" Value="0 40 0 0"/>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate x:Name="TextErrorTemplate">
                        <DockPanel LastChildFill="True">
                            <AdornedElementPlaceholder>
                                <Border BorderBrush="Red" 
                                BorderThickness="0 0 0 2"/>
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" 

                Value="True">
                    <Setter Property="ToolTip" 

                    Value="{Binding RelativeSource=
            {x:Static RelativeSource.Self},
            Path=(Validation.Errors).CurrentItem.ErrorContent}"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="LinePasswordBox" TargetType="{x:Type PasswordBox}">
            <Setter Property="BorderBrush" Value="{StaticResource MainTextColor}" />
            <Setter Property="BorderThickness" Value="0 0 0 2" />
            <Setter Property="FontSize" Value="18px" />
            <Setter Property="Foreground" Value="{StaticResource MainTextColor}" />
            <Setter Property="Width" Value="400"/>
            <Setter Property="Padding" Value="0 0 0 8"/>
            <Setter Property="Margin" Value="0 40 0 0"/>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate x:Name="PasswordErrorTemplate">
                        <DockPanel LastChildFill="True">
                            <AdornedElementPlaceholder>
                                <Border BorderBrush="Red" 
                                BorderThickness="0 0 0 2"/>
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" 

                Value="True">
                    <Setter Property="ToolTip" 

                    Value="{Binding RelativeSource=
            {x:Static RelativeSource.Self},
            Path=(Validation.Errors).CurrentItem.ErrorContent}"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RoundCornerPrimaryBtn" TargetType="{x:Type Button}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource BackgroundColor}"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="Margin" Value="0 30 0 0"/>
            <Setter Property="FontSize" Value="14px"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <Border Padding="20 20 20 20" x:Name="border" CornerRadius="5" BorderThickness="2" Background="{StaticResource MainTextColor}">
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  >
                                </ContentPresenter>
                            </Border>

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFFFFF"/>
                                <Setter Property="Foreground" Value="{StaticResource MainTextColor}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource MainTextColor}"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="2"/>

                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource MainTextColor}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RoundCornerAlternativeBtn" TargetType="{x:Type Button}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Foreground" Value="{StaticResource MainTextColor}"/>
            <Setter Property="Width" Value="400"/>
            <Setter Property="Margin" Value="0 30 0 0"/>
            <Setter Property="FontSize" Value="14px"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <Border Padding="20 20 20 20" x:Name="border" CornerRadius="5" BorderThickness="2" Background="{StaticResource BackgroundColor}" BorderBrush="{StaticResource MainTextColor}" >
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  >
                                </ContentPresenter>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource MainTextColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource BackgroundColor}"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource MainTextColor}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError"
                    Value="true">
                    <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                </Trigger>
            </Style.Triggers>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="90*" />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>
                            <Border
                                    BorderThickness="0 0 3 0"
                                    Grid.Column="0">
                                <AdornedElementPlaceholder Grid.Column="0" />
                            </Border>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
       
        <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
      <Setter Property="Height" Value="25" />
      <Setter Property="Width" Value="25" />
    </Style>
    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
      <Grid Background="{StaticResource WindowBackColor}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <Grid Grid.Row="0" Margin="5,0,5,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="75" />
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}" sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
              <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}" Width="16" sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}" />
            </Label>
            <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" FontFamily="Segoe UI Light" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Foreground="{StaticResource WindowForeColor}" FontSize="16" sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" sw:ShowSystemMenuBehavior.RightButtonShow="true">
            </Label>
            <StackPanel Grid.Column="2" Orientation="Horizontal">
              <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">_</Button>
              <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">+</Button>
              <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">X</Button>
            </StackPanel>
          </Grid>
          <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid>
              <AdornerDecorator>
                <ContentPresenter x:Name="WindowContent" />
              </AdornerDecorator>
              <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom" />
            </Grid>
          </Border>
        </Grid>
        <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE" Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW" Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE" Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE" Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE" Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
        <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW" Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
      </Grid>
      <ControlTemplate.Triggers>
        <MultiTrigger>
          <MultiTrigger.Conditions>
            <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
            <Condition Property="WindowState" Value="Normal" />
          </MultiTrigger.Conditions>
          <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
        </MultiTrigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>
        <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="AllowsTransparency" Value="True" />
            <Setter Property="MinWidth" Value="600" />
            <Setter Property="MinHeight" Value="800" />
            <Setter Property="Template" Value="{StaticResource WindowTemplate}" />
        </Style>

    </Application.Resources>
</Application>